#!
def GUID = "b45d"
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) 

{
  node('skopeo-pod') {
    // Define Maven Command to point to the correct settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"
	def CLUSTER = "na311.openshift.opentlc.com"
    // Checkout Source Code.
    stage('Checkout Source') {
      checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/tripathisushil/ox.git']]])
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      def version = getVersionFromPom("pom.xml")
      def devProject  = "'${GUID}'-tasks-dev"
      def prodProject = "'${GUID}'-tasks-prod"
      // Set the tag for the development image: version + build number
      def devTag      = "0.0-0"
      //* sh "oc set env dc/tasks VERSION='${devTag} (tasks-dev)' -n ${devProject}"
      //* sh "oc patch -n ${GUID}-tasks-dev dc tasks --patch='{"spec":{"template":{"spec":{"containers":[{"name":"tasks","resources":{"limits":{"cpu":"1","memory":"1356Mi"},"requests":{"cpu":"1","memory":"1356Mi"}}}]}}}}'"
      // Set the tag for the production image: version
      def prodTag     = "0.0"
      //* sh "oc set env dc/tasks-green VERSION='${prodTag} (tasks-green)' -n ${prodProject}"
      //* sh "oc patch -n ${GUID}-tasks-prod dc/tasks-blue --patch='{"spec":{"template":{"spec":{"containers":[{"name":"tasks-blue","resources":{"limits":{"cpu":"1","memory":"1356Mi"},"requests":{"cpu":"1","memory":"1356Mi"}}}]}}}}'"
      //* sh "oc set env dc/tasks-blue VERSION='${prodTag} (tasks-blue)' -n ${prodProject}"
      //* sh "oc patch -n ${GUID}-tasks-prod dc/tasks-green --patch='{"spec":{"template":{"spec":{"containers":[{"name":"tasks-green","resources":{"limits":{"cpu":"1","memory":"1356Mi"},"requests":{"cpu":"1","memory":"1356Mi"}}}]}}}}'"

      stage('Build war') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests=true"
      }

     parallel "Unit Tests": {
         stage ('Unit Test') 
         {
             echo "Running Unit Tests"
             sh "${mvnCmd} test"
         }
     }, "Code Analysis": {
         stage ('Code Analysis') 
         {
             echo "Running Code Analysis"
             sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com"
         }
     }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases/" 
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        script {
            openshift.withCluster() {
                openshift.withProject("${devProject}") {
                    openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
                    openshift.tag("tasks:latest", "tasks:${devTag}")
                }
            }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        script {
           // Update the Image on the Development Deployment Config
           openshift.withCluster() {
              openshift.withProject("${devProject}") {
                 openshift.set("image", "dc/tasks", "tasks=docker-registry.default.svc:5000/${devProject}/tasks:${devTag}")
                 // Update the Config Map which contains the users for the Tasks application
                 openshift.selector('configmap', 'tasks-config').delete()
                 def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )
                 // Deploy the development application.
                 openshift.selector("dc", "tasks").rollout().latest();
                 // Wait for application to be deployed
                 def dc = openshift.selector("dc", "tasks").object()
                 def dc_version = dc.status.latestVersion
                 def rc = openshift.selector("rc", "tasks-${dc_version}").object()
                 echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
                 while (rc.spec.replicas != rc.status.readyReplicas) {
                    sleep 30
                    rc = openshift.selector("rc", "tasks-${dc_version}").object()
                 }
				 def devTasksRoute = sh(returnStdout: true, script: "curl tasks-${GUID}-tasks-dev.apps.${CLUSTER}").trim()
				 while( !devTasksRoute.contains("tasks-dev") ) { 
				   echo "Waiting for URL to start. Sleeping 15sec"
				   sleep 15
				   devTasksRoute = sh(returnStdout: true, script: "curl tasks-${GUID}-tasks-dev.apps.${CLUSTER}").trim()
			     }
              }
           }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"
        script {
           sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://docker-registry.default.svc.cluster.local:5000/${devProject}/tasks:${devTag} docker://nexus3-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"
           // Tag the built image with the production tag.
           openshift.withCluster() {
              openshift.withProject("${prodProject}") {
                 openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
              }
           }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
         // Determine which application is active
         echo "Blue/Green Deployment"
         script {
            openshift.withCluster() {
               openshift.withProject("${prodProject}") {
                  activeApp = openshift.selector("route", "tasks").object().spec.to.name
                  if (activeApp == "tasks-green") {
                     destApp = "tasks-blue"
                  }
                  echo "Active Application:      " + activeApp
                  echo "Destination Application: " + destApp
                  // Update the Image on the Production Deployment Config
                  def dc = openshift.selector("dc/${destApp}").object()
                  dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${devTag}"
                  openshift.apply(dc)
                  // Update Config Map in change config files changed in the source
                  openshift.selector("configmap", "${destApp}-config").delete()
                  def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )
                  // Deploy the inactive application.
                  openshift.selector("dc", "${destApp}").rollout().latest();
                  // Wait for application to be deployed
                  def dc_prod = openshift.selector("dc", "${destApp}").object()
                  def dc_version = dc_prod.status.latestVersion
                  def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                  echo "Waiting for ${destApp} to be ready"
                  while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                     sleep 30
                     rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                  }
				  
				 def devTasksRoute = sh(returnStdout: true, script: "curl tasks-${GUID}-tasks-prod.apps.${CLUSTER}").trim()
				 while( !devTasksRoute.contains("tasks-prod") ) { 
				   echo "Waiting for URL to start. Sleeping 15sec"
				   sleep 15
				   devTasksRoute = sh(returnStdout: true, script: "curl tasks-${GUID}-tasks-prod.apps.${CLUSTER}").trim()
			     }
               }
            }
         }
      }

      stage('Switch over to new Version') {
            echo "Switching Production application to ${destApp}."
            script {
               openshift.withCluster() {
                  openshift.withProject("${prodProject}") {
                     def route = openshift.selector("route/tasks").object()
                     route.spec.to.name="${destApp}"
                     openshift.apply(route)
                  }
               }
            }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
